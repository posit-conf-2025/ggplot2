---
title: "Text rendering and font use"
author: "Thomas Lin Pedersen"
---

```{r}
#| include: false

systemfonts::require_font("Barrio")
systemfonts::require_font("MonteCarlo")
systemfonts::require_font("Datalegreya")
systemfonts::require_font("Spectral")

library(ggplot2)
theme_set(
  theme_gray() +
    theme(
      panel.background = element_rect(colour = NA, fill = "#F0F1EB")
    )
)
```

## Key takeaway today:

::: {.center-y}
>*Text rendering is hard (for Thomas), but doesn't have to be (for me)*
:::

## Today

* Selecting the right typeface
  * The systemfonts package and why graphics devices matters
  * How it just works
  * Using web fonts
* Apply rich formatting
  * The marquee package
  * marquee-flavoured markdown
  * Using it in ggplot2

## Selecting the right typeface

```{r}
#| fig.keep: none
#| warning: true
#| dev: quartz
#| dev.args: ~
#| output-location: fragment

ggplot(penguins) +
  geom_point(aes(x = bill_len, y = body_mass)) +
  theme_minimal(base_family = "FANCY FONT")
```

## The impossible life of a graphics device

::: {.center-y}
*Here is a family name and some text — go fetch*

:::::: {.fragment}
* Where are the font files (OS dependent)
* How do I read them once I find them
* How do I determine which font to use
* How do I even render text???
::::::
:::

## The impossible life of a graphics device

:::::: r-stack
::: {style="margin-left:40px"}
[![](https://github.com/rstudio/hex-stickers/blob/main/PNG/ragg.png?raw=true){width="400"}](https://ragg.r-lib.org)
:::

::: {.fragment .fade-left}
[![](https://github.com/rstudio/hex-stickers/blob/main/PNG/systemfonts.png?raw=true){width="400"}](https://systemfonts.r-lib.org)
:::

::: {.fragment .fade-left style="margin-right:40px"}
[![](https://github.com/rstudio/hex-stickers/blob/main/PNG/svglite.png?raw=true){width="400"}](https://svglite.r-lib.org)
:::
::::::

## Embracing ragg

* **In RStudio**:  
  ![](https://i.imgur.com/4XgiPWy.png){width="500"}
* **In Positron and with `ggsave()`**: ragg will be used if installed
* **In Knitr/RMarkdown/Quarto**: Set `dev = "ragg_png"`
* **In plumber**: Use the agg_png serializer
* **In Shiny and plumber2**: Used by default

or

```r
ragg::agg_png() # instead of calling png()
```

## systemfonts

#### It (should) just work

```{r}
#| output-location: default
library(systemfonts)

dplyr::glimpse(system_fonts())
```

## systemfonts

#### It (should) just work
```{r}
ggplot(penguins) +
  geom_point(
    aes(
      x = bill_len,
      y = body_mass
    )
  ) +
  theme_minimal(
    base_family = "Barrio"
  )
```

## systemfonts

#### It (should) just work

```{r}
ggplot(penguins) +
  geom_point(
    aes(
      x = bill_len,
      y = body_mass
    )
  ) +
  theme_minimal(
    base_family = "Barrio"
  ) +
  labs(
    title = "I speak emoji 🤓"
  )
```

## systemfonts

::: {.center-y}
#### Problem:
* I'm not allowed to install fonts on my computer

#### Solution
* Use `add_fonts()` to register local font files
:::

## systemfonts

::: {.center-y}
#### Problem:
* I don't want to call `add_fonts()` every time I start R

#### Solution
* Place font files in `~/fonts` or `./fonts`. These two locations will
  automatically get scanned when systemfonts is loaded
:::

## systemfonts

::: {.center-y}
#### Problem:
* I don't like using a web browser to find fonts

#### Solution
* Download and add fonts from web repositories directly using
  `get_from_google_fonts()` and `get_from_font_squirrel()`
:::

## systemfonts

::: {.center-y}
#### Problem:
* I don't know if the font is available on the computer my script will be
  running on

#### Solution
* Use `require_font()` to ensure the font is installed from a web repository if
  missing (or error if it can't be found there)

  (this slideshow has `require_font("Barrio")` in the beginning so it can render everywhere)
:::

## [Exercise 3.1](../exercises/3_text_fonts.qmd#working-with-fonts) {.center style="text-align:center;"}

{{< countdown minutes=5 >}}

## Apply rich formatting

&nbsp;

#### The limitations of R
* font selection is limited.
  * Two levels of boldness (normal and bold)
  * Italic on/off
* All text need to share the same font

## Apply rich formatting

* ggtext by Claus Wilke
  * Works within the bounds of the old graphics engine limits
  * Uses a mix of basic markdown and a subset of HTML
  * Doesn't have a hex logo
* marquee by me
  * Uses very new and fancy functionality I got Paul to add to R
  * Uses a superset of CommonMark syntax
  * Does have a logo

## {.center}

::::: r-stack
[![](https://github.com/rstudio/hex-stickers/blob/main/PNG/marquee.png?raw=true){width="400"}](https://marquee.r-lib.org)
:::::

## marquee

* Input text is treated as markdown and used for formatting
* CommonMark (basically what you expect) is supported
* Custom spans are supported

## marquee

```{r}
library(marquee)

text <- "
Now you too can **sound like an llm**

_Here is what you need:_

* Add boldness to text at random
* Put everything in lists  
✅ Make those lists use emojis

Remember to delve into the intricate 
words that **underscore your potential**
"

grid::grid.draw(marquee_grob(text))
```

## Custom spans

marquee uses cli-esque syntax for custom spans.

* `{.red color me red}` will change the color of text to red
* `{#00FF00 color me green}` will change the color to green
* `{.30 make me big}` will set the size to 30
* `{.class put a class on it}` will add the class `class` to the text
  * this will become relevant when we talk about styling
* `{.sub subscript}` and `{.sup superscript}` are predefined custom spans

## Custom spans

```{r}
text <- "
Some {.red *red* text} and some {#00FF00 *green* text}
walked into a {.30 huge} bar and said to the {.person barman}:
”Can I get a glass of H{.sub 2}O?”
"

grid::grid.draw(marquee_grob(text))
```

## [Exercise 3.2](../exercises/3_text_fonts.qmd#basic-markdown-formatting-with-marquee) {.center style="text-align:center;"}

{{< countdown minutes=5 >}}

## Supercharged images

```{r}
p <- last_plot()
point <- grid::pointsGrob(0.5, 0.5)

text <- "
We made a *plot* earlier. Let's have a look:

![](p)

It can even work with grobs: ![](point)
"

grid::grid.draw(marquee_grob(text))
```

## Tables

No markdown table support, but...

```{r}
table <- gt::gt(penguins[1:6, 1:4])

text <- "
Why use markdown when you have gt

![](table)
"

grid::grid.draw(marquee_grob(text))
```

## Styling

* So far we have used the default style which matches standard (GitHub) markdown rendering
* marquee provides a simple but powerful styling system
  ```{r}
  #| output-location: default
  
  classic_style()
  ```

## Styling

* Each tag can be styled with 37 different properties
  ```{r}
  #| output-location: default

  names(classic_style()[[1]]$base)
  ```

## Styling

* Styling is powered by direct inheritance
* Any `NULL` value will get it's value from the parent
* Any `rel()` value will multiply the parent value with the rel value
* Use `em()` to make a value dependent on the text size of the element
* Use `rem()` to make a value dependent on the text size of the root element
* Use `skip_inherit()` to make a value uninheritable

## {.center}

>Don't roll your own — modify `classic_style()`

## Styling
```{r}
#| output-location: default

new_style <- classic_style(base_size = 30) |> 
  modify_style(
    "fancy",
    family = "MonteCarlo",
    weight = "light",
    features = font_feature(
      ligatures = c("contextual", "discretionary"),
      letters = c("swash", "stylistic"),
      swsh = 1
    )
  ) |> 
  modify_style(
    "plot",
    family = "Datalegreya",
    weight = "bold"
  )
```

## Styling
```{r}
text <- "
{.fancy Readability is overrated}

{.plot Even when it  
c|2o|3n|2t|3[++]a|1i|2n|0[--]s|1[high [low  ]     data}
"

systemfonts::match_fonts("MonteCarlo", weight = "light")

grid::grid.draw(
  marquee_grob(text, new_style)
)
```

## [Exercise 3.3](../exercises/3_text_fonts.qmd#advanced-marquee-styling) {.center style="text-align:center;"}

{{< countdown minutes=5 >}}

## What about ggplot2

* Apart from the low-level grob that package developers can use, marquee also include high-level ggplot2 functions
  * `geom_marquee()`
  * `element_marquee()`
  * `guide_marquee()`
* These will eventually be included directly in ggplot2

## `geom_marquee()`

* Replacement for `geom_text()`/`geom_label()`
* How do you reconcile the `style` aesthetic with the other text-related aesthetics?
* Be aware of markdown (single linebreak is ignored)

## `geom_marquee()`

```{r}
#| code-line-numbers: "|16-22"
penguins$outlier <- penguins$bill_len > 55 & 
  penguins$flipper_len < 190
penguins$text <- paste0(
  "Suspecious *Pygoscelis ", 
  tolower(penguins$species), 
  "*"
)
style <- classic_style() |> 
  modify_style(
    "body", 
    border = "black",
    border_width = trbl(1),
    border_radius = 3,
    padding = trbl(2),
    margin = trbl(0)
  )
ggplot(
  penguins, 
  aes(x = bill_len, y = flipper_len)
) + 
  geom_point(
    aes(colour = I(ifelse(outlier, "red", "black")))
  ) + 
  geom_marquee(
    aes(label = text), 
    data = penguins[penguins$outlier,],
    fill = "white",
    style = style,
    hjust = 1,
    vjust = 1
  )
```

## `geom_marquee()`

```{r}
ggplot(
  penguins, 
  aes(x = bill_len, y = flipper_len)
) + 
  geom_point(
    aes(colour = I(ifelse(outlier, "red", "black")))
  ) + 
  geom_marquee(
    aes(label = text), 
    data = penguins[penguins$outlier,],
    style = style,
    fill = "white",
    hjust = "right-ink",
    vjust = 1,
    width = grid::unit(5, "cm")
  )
```

## `element_marquee()`

* Replacement for `element_text()``
* Properties are added to the `base` element in style
* Automatic text wrapping (with some caveats)

## `element_marquee()`

```{r}
ggplot(
  penguins, 
  aes(x = bill_len, y = flipper_len)
) + 
  geom_point() +
  labs(
    title = "An overview of various *Pygoscelis* (penguin) species"
  ) + 
  theme(
    plot.title = element_marquee(family = "Spectral")
  )
```

## `guide_marquee()`

* A special guide for mixing long free-form text with legends
* Conceptually a mix between a subtitle and a guide

## `guide_marquee()`

```{r}
ggplot(penguins) + 
  geom_point(aes(x = bill_len, y = flipper_len, colour = species)) + 
  scale_color_discrete(
    name = "
Overview of how bill length and flipper length relate to each other
in the penguin species *Adelie* <<1>>, *Chinstrap* <<2>>, and 
*Gentoo* <<3>>.",
    guide = guide_marquee(width = grid::unit(2.75, "in"))
  )
```

## `guide_marquee()`

```{r}
ggplot(penguins) + 
  geom_point(aes(x = bill_len, y = flipper_len, colour = species)) + 
  scale_color_discrete(
    name = "
Overview of how bill length and flipper length relate to each other
in the penguin species {.1 *Adelie*}, {.2 *Chinstrap*}, and 
{.3 *Gentoo*}.",
    guide = guide_marquee(width = grid::unit(2.75, "in"))
  )
```

## [Exercise 3.4](../exercises/3_text_fonts.qmd#using-geom_marquee-in-ggplot2) {.center style="text-align:center;"}

{{< countdown minutes=5 >}}

## {.center}

Next session: [Styling your plot](4_theme_guide.qmd)
