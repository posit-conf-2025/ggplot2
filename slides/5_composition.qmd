---
title: "Plot composition"
author: "Thomas Lin Pedersen"
---

```{r}
#| include: false

library(ggplot2)
library(patchwork)
```

## Key takeaway today

::: {.center-y}
> Composing plots are no harder than adding a new layer to your plot
:::

## Today

* Introduce patchwork for plot composition
* From simple to complex layouts
  - Key design principles
  - Operators
  - Escaping the grid
* The non-panel stuff
  - Annotation
  - Guide handling
* Object support
* Interactivity

## {.center}

::: {.r-stack}
[![](https://github.com/rstudio/hex-stickers/blob/main/PNG/patchwork.png?raw=true){width="400"}](https://patchwork.data-imaginist.com)
:::

## Patchwork

* Composition should have a composable API
* The API should feel natural and easy to reason about in order to invite 
  experimentation
* Assume alignment but give escape hatch

::: {style="text-align:center;"}
<iframe width="560" height="315" src="https://www.youtube.com/embed/mtUKYGvkXm8?si=uTD_S9Scp7-yky5b" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
:::

## Patchwork *in a nutshell*

```{r}
p1 <- ggplot(penguins) + 
  geom_point(aes(x = flipper_len, y = bill_len))

p2 <- ggplot(penguins) + 
  geom_histogram(aes(flipper_len))

p1 + p2
```

## Patchwork *in a nutshell*

```{r}
p3 <- ggplot(penguins) + 
  geom_boxplot(aes(species, bill_len))

p1 | (p2 / p3)
```

## Patchwork *in a nutshell*

```{r}
ggplot(penguins) + 
  geom_point(aes(x = flipper_len, y = bill_len)) + 
  ggplot(penguins) + 
  geom_histogram(aes(flipper_len))
```

## Patchwork *in a nutshell*

```{r}
p1 + p2 +
  geom_density(
    aes(flipper_len, after_stat(count))
  )
```

## Patchwork *in a nutshell*

<!-- Demonstrate difference between `+ theme_*()` and `& theme_*()`? -->

```{r}
p1 + p2 &
  theme_minimal()
```

## Patchwork layout model

<!-- Should maybe include an example with facets? -->

![](../assets/img/the_grid_1.svg)

## Patchwork layout model

![](../assets/img/the_grid_2.svg)

## Patchwork layout model

![](../assets/img/the_grid_nested_1.svg)

## Patchwork layout model

![](../assets/img/the_grid_nested_2.svg)

## Patchwork layout model

![](../assets/img/the_grid_nested_3.svg)

## More layout options

```{r}
p4 <- ggplot(penguins) + 
  geom_bar(
    aes(species, fill = sex), 
    position = "dodge"
  )

wrap_plots(p1, p2, p3, p4, widths = c(1, 2))
```

## More layout options

```{r}
p1 + p2 + p3 + p4 + plot_layout(widths = c(1, 2))
```

## More layout options

```{r}
layout <- "
A#B
#CC
DD#
"
p1 + p2 + p3 + p4 + 
  plot_layout(design = layout)
```

## More layout options

```{r}
layout <- c(
  area(1, 1, 2, 3),
  area(2, 2, 3, 3)
)
p1 + p2 + 
  plot_layout(design = layout)
```

## [Exercise](../exercises/5_composition.qmd#patchwork-composition) {.center style="text-align:center;"}

## Layout modifiers

* The composition consists of a grid
* Panels are placed in one or more neighboring cells
* Everything outside the panels are placed in the gutter which expands to
  contain all

* What if you don't want that?

## Layout modifiers - Insets

```{r}
p1 + inset_element(
  p2, 
  left = 0.5, 
  bottom = 0.5, 
  right = grid::unit(1, "npc") - grid::unit(6, "mm"),
  top = grid::unit(1, "npc") - grid::unit(6, "mm"),
)
```

## Layout modifiers - Free

```{r}
p3a <- p3 + 
  guides(x = guide_axis(angle = 45))
p1 + p3a
```

## Layout modifiers - Free

```{r}
p1 + free(p3a, side = "b")
```

## Layout modifiers - Free

```{r}
free(p1, "label", side = "b") + p3a
```

## [Exercise](../exercises/5_composition.qmd#layout-modifiers) {.center style="text-align:center;"}

## Annotations

* Once composed, the parts will constitute a new graphic
* Like the individual plots, this graphic can be annotated

```{r}
p1 + p2 + plot_annotation(
  title = "The _full_ story of penguins",
  subtitle = "*You won't believee what you'll find*",
  caption = "source: The `penguins` dataset in R",
  theme = marquee::marquefy_theme(theme_gray())
)
```

## Annotations

* Once composed, the parts will constitute a new graphic
* Like the individual plots, this graphic can be annotated

```{r}
p1 + 
  labs(title = "This is a plot title") + 
  p2 + 
  plot_annotation(
    title = "The _full_ story of penguins",
    subtitle = "*You won't believee what you'll find*",
    caption = "source: The `penguins` dataset in R",
    theme = marquee::marquefy_theme(theme_gray())
  )
```

## Tagging

* With multi-panel graphics you often need a way to refer to the subgraphics

```{r}
p123 <- (p1 | (p2 / p3)) & theme(
  plot.tag = element_text(size = 8)
)

p123 + 
  plot_annotation(
    tag_levels = "1",
    tag_suffix = ")"
  )
```

## Tagging

* It knows about nesting as well

```{r}
p123[[2]] <- p123[[2]] + 
  plot_layout(tag_level = "new")

p123 + 
  plot_annotation(
    tag_levels = c("1", "a"),
    tag_suffix = ")"
  )
```

## [Exercise](../exercises/5_composition.qmd#annotations-and-tagging) {.center style="text-align:center;"}

## Guide handling

* Guides are often global instead of linked to a single subplot

```{r}
p1 / p4
```

## Guide handling

* Use `guides = "collect"` to fetch all guides from subplots and place them at
  the top level

```{r}
(p1 / p4) + 
  plot_layout(guides = "collect")
```

## Guide handling

```{r}
p1a <- ggplot(penguins) + 
  geom_point(
    aes(x = flipper_len, y = bill_len, shape = species)
  )

p1a | p4
```

## Guide handling

```{r}
(p1a | p4) + 
  plot_layout(guides = "collect")
```

## Guide handling

* Duplicate guides are automatically removed

```{r}
p2a <- ggplot(penguins) + 
  geom_histogram(
    aes(flipper_len, fill = sex)
  )

(p2a | p4) + 
  plot_layout(guides = "collect")
```

## Guide handling

* Duplicate guides are automatically removed

```{r}
p2a <- ggplot(penguins) + 
  geom_histogram(
    aes(flipper_len, fill = sex)
  )

p2a + p4 + p3 + guide_area() + 
  plot_layout(guides = "collect")
```

## Guide handling

* Axes are guides too

```{r}
(p3 / p4) + plot_layout(
  axes = "collect",
  guides = "collect"
)
```

## [Exercise](../exercises/5_composition.qmd#guide-handling) {.center style="text-align:center;"}

## Other objects

* Sometimes you need something other than a ggplot (ðŸ¤¯)
* patchwork supports a range of different object types

## Other objects: gt

```{r}
table <- gt::gt(
  penguins[
    sample(nrow(penguins), 10), 
    c("species", "flipper_len", "bill_len")
  ]
)
p1 + table
```

## Other objects: gt

```{r}
p1 + 
  wrap_table(table, panel = "full", space = "fixed")
```

## Other objects: images

```{r}
logo <- system.file("help/figures/logo.png", package = "patchwork")
logo <- png::readPNG(logo, native = TRUE)

p1 + logo
```

## Other objects: grobs

<!-- require Devanagari compatible font? -->

```{r}
grob <- marquee::marquee_grob(textshaping::lorem_text("devanagari"))

p1 + grob
```


## Other objects: base graphics

```{r}
p1 + ~plot(penguins$flipper_len, penguins$bill_len)
```

## Other objects: base graphics

```{r}
par(mar = c(0, 2, 0, 0), bg = NA)
p1 + 
  wrap_elements(
    panel = ~plot(penguins$flipper_len, penguins$bill_len), 
    clip = FALSE
  )
```

## [Exercise](../exercises/5_composition.qmd#other-objects) {.center style="text-align:center;"}

## {.center}

::: r-stack
[![](https://github.com/davidgohel/ggiraph/blob/master/man/figures/logo.svg?raw=true){width="400"}](https://ardata.fr/ggiraph-book/)
:::

## ggiraph integration

* ggiraph is a package that allows certain interactivity to ggplots
* You create your plots as you always do, but add specific interactive geoms
* If you combine them with patchwork, the interaction is linked

## ggiraph integration

```{r}
library(ggiraph)

p1 <- ggplot(penguins) + 
  geom_point_interactive(
    aes(
      x = flipper_len, 
      y = bill_len, 
      tooltip = species,
      data_id = species
    )
  ) + 
  theme_grey(base_size = 24)

girafe(ggobj = p1)
```

## ggiraph integration

```{r}
p2 <- ggplot(penguins) + 
  geom_bar_interactive(
    aes(
      x = species,
      data_id = species
    )
  ) + 
  theme_grey(base_size = 24)

girafe(ggobj = p2)
```

## ggiraph integration

```{r}
girafe(
  ggobj = p1 | p2
)
```
